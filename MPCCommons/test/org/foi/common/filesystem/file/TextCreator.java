package org.foi.common.filesystem.file;

public class TextCreator {

    public static String validMiniCodeExcample() {
        return "package org.foi.mpc.phases.detection.tools.JPlag;\n"
                + "\n"
                + "import java.io.Serializable;\n"
                + "\n"
                + "\n"
                + "class MPCMatches implements Serializable{\n"
                 + "       SherlockProcess process = new TokeniseFiles(this);\n"
                + "        process.setNatural(false);\n"
                + "        process.setPriority(Thread.NORM_PRIORITY - 1);\n"
                + "        process.start();\n"
                + "        try {\n"
                + "            process.join();\n"
                + "        } catch (InterruptedException ex) {\n"
                + "            System.err.println(\"Error join thread preproces files\");\n"
                + "        }\n"
                + "\n"
                + "        //testDir.delete();\n"
                + "\n"
                + "}";
    }

    public static String validMini2CodeExcample() {
        return "package org.foi.mpc.phases.detection.tools.JPlag;\n"
                + "\n"
                + "import java.io.Serializable;\n"
                + "\n"
                + "\n"
                + "class MPCMatches implements Serializable{\n"
                + "    static private String files2Analize[];\n"
                + "    static private String folders2Delete[];\n"
                + "    static private int overview_report_1_min_similarity;\n"
                + "    static private int overview_report_2_min_similarity;\n"
                + "    static private int overview_report_2_max_similarity;\n"
                + "    static private int overview_report_2_min_types;\n"
                + "       SherlockProcess process = new TokeniseFiles(this);\n"
                + "        process.setNatural(false);\n"
                + "        process.setPriority(Thread.NORM_PRIORITY - 1);\n"
                + "        process.start();\n"
                + "        try {\n"
                + "            process.join();\n"
                + "        } catch (InterruptedException ex) {\n"
                + "            System.err.println(\"Error join thread preproces files\");\n"
                + "        }\n"
                + "\n"
                + "        //testDir.delete();\n"
                + "\n"
                + "}";
    }

    public static String getSourceCodeExample1() {
        return " @Test\n"
                + "    public void runSherlockPreprocess() {\n"
                + "        SherlockProcess process = new TokeniseFiles(this);\n"
                + "        process.setNatural(false);\n"
                + "        process.setPriority(Thread.NORM_PRIORITY - 1);\n"
                + "        process.start();\n"
                + "        try {\n"
                + "            process.join();\n"
                + "        } catch (InterruptedException ex) {\n"
                + "            System.err.println(\"Error join thread preproces files\");\n"
                + "        }\n"
                + "\n"
                + "        //testDir.delete();\n"
                + "    }";
    }

    public static String getSourceCodeExample2() {
        return "/*\n"
                + " * Copyright (C) 2015 Matija Novak <matija.novak@foi.hr>\n"
                + " *\n"
                + " * This program is free software: you can redistribute it and/or modify\n"
                + " * it under the terms of the GNU General Public License as published by\n"
                + " * the Free Software Foundation, either version 3 of the License, or\n"
                + " * (at your option) any later version.\n"
                + " *\n"
                + " * This program is distributed in the hope that it will be useful,\n"
                + " * but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
                + " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
                + " * GNU General Public License for more details.\n"
                + " *\n"
                + " * You should have received a copy of the GNU General Public License\n"
                + " * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
                + " */\n"
                + "\n"
                + "package helper;\n"
                + "\n"
                + "import helper.exceptions.MySettingsException;\n"
                + "import helper.prepareVisitors.RenameStudentFolders;\n"
                + "import helper.prepareVisitors.StudentFilesRenamer;\n"
                + "import java.nio.charset.Charset;\n"
                + "import java.nio.file.Path;\n"
                + "import java.nio.file.Paths;\n"
                + "import java.util.Properties;\n"
                + "import java.util.logging.Level;\n"
                + "\n"
                + "/**\n"
                + " * Static class that holds all global parameters read form settings file\n"
                + " * @author Matija Novak\n"
                + " */\n"
                + "public class GP {\n"
                + "    \n"
                + "    static private Level fileLogLevel;\n"
                + "    static private Level consoleLogLevel;\n"
                + "    static private Path workingDir;\n"
                + "    static private Path workingDirDataSets;\n"
                + "    static private Path workingDirSettings; \n"
                + "    static private Path sourceDir;\n"
                + "    static private int workingDirLevels;\n"
                + "    static private boolean useScherlockDetection;\n"
                + "    static private boolean useJPlagDetection;\n"
                + "    static private Charset defaultCharset;\n"
                + "    static private String db_user;\n"
                + "    static private String db_pass;\n"
                + "    static private String db_server;\n"
                + "    static private String db_port;\n"
                + "    static private String db_name;\n"
                + "    static private String driver_mysql;\n"
                + "    static private String driver_postgree;\n"
                + "    static private String driver_derby;\n"
                + "    static private String driver_access;\n"
                + "    static private String driver;\n"
                + "    static private String plagiarism_jar_path;\n"
                + "    static private String mails[];\n"
                + "    static private boolean runPlagiarsimCheck;\n"
                + "    static private boolean runDeleteLoadMathcesIntoDb;\n"
                + "    static private boolean runSendMail;\n"
                + "    static private boolean mergeAllExtensions2OneFile;\n"
                + "    static private String files2Analize[];\n"
                + "    static private String folders2Delete[];\n"
                + "    static private int overview_report_1_min_similarity;\n"
                + "    static private int overview_report_2_min_similarity;\n"
                + "    static private int overview_report_2_max_similarity;\n"
                + "    static private int overview_report_2_min_types;\n"
                + "    static private String mail_smtp;\n"
                + "    static private String prof_files_dir_name;\n"
                + "    static private String java_home_dir;\n"
                + "    static private boolean runTokenizedVersion;\n"
                + "    static private StudentFilesRenamer.RenameStrategy renameStrategy;\n"
                + "    static private String standardFilePrefix;\n"
                + "\n"
                + "    private GP(){\n"
                + "        //No instance posible\n"
                + "    }\n"
                + "\n"
                + "    static public void init_settings(Properties params) throws MySettingsException\n"
                + "    {\n"
                + "        for(String prop : params.stringPropertyNames()){\n"
                + "            if(params.get(prop).equals(\"\")&&!prop.equals(\"db_pass\"))\n"
                + "            {\n"
                + "                \n"
                + "                throw new MySettingsException(\"Plese enter all settings\");\n"
                + "            }\n"
                + "            System.out.println(prop + \" => \"+params.getProperty(prop));\n"
                + "        }\n"
                + "        \n"
                + "        consoleLogLevel = Level.parse(params.getProperty(\"consoleLogLevel\"));\n"
                + "        fileLogLevel = Level.parse(params.getProperty(\"fileLogLevel\"));\n"
                + "        defaultCharset = Charset.forName(params.getProperty(\"defaultCharset\"));\n"
                + "        workingDir = Paths.get(params.getProperty(\"workingDir\"));\n"
                + "        sourceDir = Paths.get(params.getProperty(\"sourceDir\"));\n"
                + "        workingDirLevels = Integer.parseInt(params.getProperty(\"workingDirLevels\"));\n"
                + "        workingDirDataSets = Paths.get(workingDir.toString(),\"datasets\");\n"
                + "        workingDirSettings = Paths.get(workingDir.toString(),\"settings\");\n"
                + "        useScherlockDetection = params.getProperty(\"useScherlockDetection\").equalsIgnoreCase(\"true\");\n"
                + "        useJPlagDetection = params.getProperty(\"useJPlagDetection\").equalsIgnoreCase(\"true\");\n"
                + "        db_name = params.getProperty(\"db_name\");\n"
                + "        db_user = params.getProperty(\"db_user\");\n"
                + "        db_pass = params.getProperty(\"db_pass\");\n"
                + "        db_server = params.getProperty(\"db_server\");\n"
                + "        db_port = params.getProperty(\"db_port\");\n"
                + "        driver_mysql = params.getProperty(\"driver_mysql\");\n"
                + "        driver_postgree = params.getProperty(\"driver_postgree\");\n"
                + "        driver_derby = params.getProperty(\"driver_derby\");\n"
                + "        driver_access = params.getProperty(\"driver_access\");\n"
                + "        setDriver();\n"
                + "        plagiarism_jar_path = params.getProperty(\"plagiarism_jar_path\");\n"
                + "        mails = params.getProperty(\"mails\").split(\",\");\n"
                + "        runPlagiarsimCheck = params.getProperty(\"runPlagiarsimCheck\").equalsIgnoreCase(\"true\");\n"
                + "        runDeleteLoadMathcesIntoDb = params.getProperty(\"runDeleteLoadMathcesIntoDb\").equalsIgnoreCase(\"true\");\n"
                + "        runSendMail = params.getProperty(\"runSendMail\").equalsIgnoreCase(\"true\");\n"
                + "        mergeAllExtensions2OneFile = params.getProperty(\"mergeAllExtensions2OneFile\").equalsIgnoreCase(\"true\");\n"
                + "        driver_derby = params.getProperty(\"driver_derby\");\n"
                + "        files2Analize = params.getProperty(\"files2Analize\").split(\",\");\n"
                + "        folders2Delete = params.getProperty(\"folders2Delete\").split(\",\");\n"
                + "        overview_report_1_min_similarity = Integer.parseInt(params.getProperty(\"overview_report_1_min_similarity\"));\n"
                + "        overview_report_2_min_similarity = Integer.parseInt(params.getProperty(\"overview_report_2_min_similarity\"));\n"
                + "        overview_report_2_max_similarity = Integer.parseInt(params.getProperty(\"overview_report_2_max_similarity\"));\n"
                + "        overview_report_2_min_types = Integer.parseInt(params.getProperty(\"overview_report_2_min_types\"));\n"
                + "        mail_smtp = params.getProperty(\"mail_smtp\");\n"
                + "        prof_files_dir_name = params.getProperty(\"prof_files_dir_name\");\n"
                + "        java_home_dir = params.getProperty(\"java_home_dir\");\n"
                + "        runTokenizedVersion = params.getProperty(\"runTokenizedVersion\").equalsIgnoreCase(\"true\");\n"
                + "        standardFilePrefix = params.getProperty(\"standardFilePrefix\");\n"
                + "        \n"
                + "        \n"
                + "        if(params.getProperty(\"renameStrategy\").equals(\"AUTOMATIC\")){\n"
                + "            renameStrategy = StudentFilesRenamer.RenameStrategy.AUTOMATIC;\n"
                + "        }\n"
                + "        else if(params.getProperty(\"renameStrategy\").equals(\"WEBDIP\")){\n"
                + "            renameStrategy = StudentFilesRenamer.RenameStrategy.WebDiP;\n"
                + "        }\n"
                + "        else if(params.getProperty(\"renameStrategy\").equals(\"IWA\")){\n"
                + "            renameStrategy = StudentFilesRenamer.RenameStrategy.IWA;\n"
                + "        }\n"
                + "        else if(params.getProperty(\"renameStrategy\").equals(\"UZDIZ\")){\n"
                + "            renameStrategy = StudentFilesRenamer.RenameStrategy.UzDiz;\n"
                + "        }\n"
                + "        else if(params.getProperty(\"renameStrategy\").equals(\"NWTIS\")){\n"
                + "            renameStrategy = StudentFilesRenamer.RenameStrategy.NWTiS;\n"
                + "        }\n"
                + "        else {\n"
                + "            throw new MySettingsException(\"NoSuch renameStrategySuported\");\n"
                + "        }\n"
                + "\n"
                + "    }\n"
                + "\n"
                + "    public static String getStandardFilePrefix() {\n"
                + "        return standardFilePrefix;\n"
                + "    }\n"
                + "\n"
                + "    public static void setStandardFilePrefix(String standardFilePrefix) {\n"
                + "        GP.standardFilePrefix = standardFilePrefix;\n"
                + "    }\n"
                + "    \n"
                + "\n"
                + "    public static boolean isUseJPlagDetection() {\n"
                + "        return useJPlagDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static void setUseJPlagDetection(boolean useJPlagDetection) {\n"
                + "        GP.useJPlagDetection = useJPlagDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static boolean isUseScherlockDetection() {\n"
                + "        return useScherlockDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static void setUseScherlockDetection(boolean useScherlockDetection) {\n"
                + "        GP.useScherlockDetection = useScherlockDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static Charset getDefaultCharset() {\n"
                + "        return defaultCharset;\n"
                + "    }\n"
                + "\n"
                + "    public static void setDefaultCharset(Charset defaultCharset) {\n"
                + "        GP.defaultCharset = defaultCharset;\n"
                + "    }\n"
                + "    \n"
                + "     public static Path getWorkingDirDataSets() {\n"
                + "        return workingDirDataSets;\n"
                + "    }\n"
                + "\n"
                + "    public static void setWorkingDirDataSets(Path workingDirDataSets) {\n"
                + "        GP.workingDirDataSets = workingDirDataSets;\n"
                + "    }\n"
                + "\n"
                + "    public static Path getWorkingDirSettings() {\n"
                + "        return workingDirSettings;\n"
                + "    }\n"
                + "\n"
                + "    public static void setWorkingDirSettings(Path workingDirSettings) {\n"
                + "        GP.workingDirSettings = workingDirSettings;\n"
                + "    }\n"
                + "\n"
                + "    public static StudentFilesRenamer.RenameStrategy getRenameStrategy() {\n"
                + "        return renameStrategy;\n"
                + "    }\n"
                + "\n"
                + "    public static void setRenameStrategy(StudentFilesRenamer.RenameStrategy renameStrategy) {\n"
                + "        GP.renameStrategy = renameStrategy;\n"
                + "    }\n"
                + "    \n"
                + "    static public String getJava_home_dir() {\n"
                + "        return java_home_dir;\n"
                + "    }\n"
                + "\n"
                + "    static public void setJava_home_dir(String ajava_home_dir) {\n"
                + "        java_home_dir = ajava_home_dir;\n"
                + "    }\n"
                + "\n"
                + "    static public String getProf_files_dir_name() {\n"
                + "        return prof_files_dir_name;\n"
                + "    }\n"
                + "\n"
                + "    static public void setProf_files_dir_name(String aprof_files_dir_name) {\n"
                + "        prof_files_dir_name = aprof_files_dir_name;\n"
                + "    }\n"
                + "\n"
                + "    static public String getMail_smtp() {\n"
                + "        return mail_smtp;\n"
                + "    }\n"
                + "\n"
                + "    static public void setMail_smtp(String amail_smtp) {\n"
                + "        mail_smtp = amail_smtp;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_2_min_types() {\n"
                + "        return overview_report_2_min_types;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_2_min_types(int aoverview_report_2_min_types) {\n"
                + "        overview_report_2_min_types = aoverview_report_2_min_types;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_1_min_similarity() {\n"
                + "        return overview_report_1_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_1_min_similarity(int aoverview_report_1_min_similarity) {\n"
                + "        overview_report_1_min_similarity = aoverview_report_1_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_2_min_similarity() {\n"
                + "        return overview_report_2_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_2_min_similarity(int aoverview_report_2_min_similarity) {\n"
                + "        overview_report_2_min_similarity = aoverview_report_2_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_2_max_similarity() {\n"
                + "        return overview_report_2_max_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_2_max_similarity(int aoverview_report_2_max_similarity) {\n"
                + "        overview_report_2_max_similarity = aoverview_report_2_max_similarity;\n"
                + "    }\n"
                + "\n"
                + "    \n"
                + "    \n"
                + "    static public String[] getFiles2Analize() {\n"
                + "        return files2Analize;\n"
                + "    }\n"
                + "\n"
                + "    static public void setFiles2Analize(String[] files2Analize) {\n"
                + "        files2Analize = files2Analize;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isMergeAllExtensions2OneFile() {\n"
                + "        return mergeAllExtensions2OneFile;\n"
                + "    }\n"
                + "\n"
                + "    static public void setMergeAllExtensions2OneFile(boolean amergeAllExtensions2OneFile) {\n"
                + "        mergeAllExtensions2OneFile = amergeAllExtensions2OneFile;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunPlagiarsimCheck() {\n"
                + "        return runPlagiarsimCheck;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunPlagiarsimCheck(boolean arunPlagiarsimCheck) {\n"
                + "        runPlagiarsimCheck = arunPlagiarsimCheck;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunDeleteLoadMathcesIntoDb() {\n"
                + "        return runDeleteLoadMathcesIntoDb;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunDeleteLoadMathcesIntoDb(boolean arunDeleteLoadMathcesIntoDb) {\n"
                + "        runDeleteLoadMathcesIntoDb = arunDeleteLoadMathcesIntoDb;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunSendMail() {\n"
                + "        return runSendMail;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunSendMail(boolean arunSendMail) {\n"
                + "        runSendMail = arunSendMail;\n"
                + "    }\n"
                + "\n"
                + "    static public String[] getMails() {\n"
                + "        return mails;\n"
                + "    }\n"
                + "\n"
                + "    static public void setMails(String[] amails) {\n"
                + "        mails = amails;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_user() {\n"
                + "        return db_user;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_user(String adb_user) {\n"
                + "        db_user = adb_user;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_pass() {\n"
                + "        return db_pass;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_pass(String adb_pass) {\n"
                + "        db_pass = adb_pass;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_server() {\n"
                + "        return db_server;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_server(String adb_server) {\n"
                + "        db_server = adb_server;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_port() {\n"
                + "        return db_port;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_port(String adb_port) {\n"
                + "        db_port = adb_port;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_name() {\n"
                + "        return db_name;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_name(String adb_name) {\n"
                + "        db_name = adb_name;\n"
                + "    }\n"
                + "\n"
                + "    static public String getPutanja_do_plagiarsim_jar() {\n"
                + "        return plagiarism_jar_path;\n"
                + "    }\n"
                + "\n"
                + "    static public void setPutanja_do_plagiarsim_jar(String aplagiarism_jar_path) {\n"
                + "        plagiarism_jar_path = aplagiarism_jar_path;\n"
                + "    }\n"
                + "    \n"
                + "    /**\n"
                + "     *\n"
                + "     * @return daje driver za access\n"
                + "     */\n"
                + "    static public String getDriver_access() {\n"
                + "        return driver_access;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     * postavlja driver za access\n"
                + "     * @param driver_access\n"
                + "     */\n"
                + "    static public void setDriver_access(String adriver_access) {\n"
                + "        driver_access = adriver_access;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     *\n"
                + "     * @return daje driver za derby\n"
                + "     */\n"
                + "    static public String getDriver_derby() {\n"
                + "        return driver_derby;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     * postavlja driver za derby\n"
                + "     * @param driver_derby\n"
                + "     */\n"
                + "    static public void setDriver_derby(String adriver_derby) {\n"
                + "        driver_derby = adriver_derby;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     *\n"
                + "     * @return daje driver za mysql\n"
                + "     */\n"
                + "    static public String getDriver_mysql() {\n"
                + "        return driver_mysql;\n"
                + "    }\n"
                + "/**\n"
                + " * postavlja driver za mysql\n"
                + " * @param driver_mysql\n"
                + " */\n"
                + "    static public void setDriver_mysql(String adriver_mysql) {\n"
                + "        driver_mysql = adriver_mysql;\n"
                + "    }\n"
                + "/**\n"
                + " *\n"
                + " * @return dajde driver za postgree\n"
                + " */\n"
                + "    static public String getDriver_postgree() {\n"
                + "        return driver_postgree;\n"
                + "    }\n"
                + "/**\n"
                + " * postavlja driver za postgree\n"
                + " * @param driver_postgree\n"
                + " */\n"
                + "    static public void setDriver_postgree(String adriver_postgree) {\n"
                + "        driver_postgree = adriver_postgree;\n"
                + "    }\n"
                + "\n"
                + "/**\n"
                + " * postavlja drivere ovisno dali je baza mysql/psql/derby/access\n"
                + " */\n"
                + "    static public void setDriver()\n"
                + "    {\n"
                + "        String server = getDb_server();\n"
                + "        if (server.indexOf(\"mysql\") != -1) {\n"
                + "            driver = getDriver_mysql();\n"
                + "        } else if (server.indexOf(\"derby\") != -1) {\n"
                + "            driver = getDriver_derby();\n"
                + "        } else if (server.indexOf(\"postgresql\") != -1) {\n"
                + "            driver = getDriver_postgree();\n"
                + "        } else if (server.indexOf(\"access\") != -1) {\n"
                + "            driver = getDriver_access();\n"
                + "        }\n"
                + "\n"
                + "        try {\n"
                + "            Class.forName(driver);\n"
                + "        } catch (java.lang.ClassNotFoundException ex2) {\n"
                + "            System.err.print(\"ClassNotFoundException: \");\n"
                + "            System.err.println(ex2.toString());\n"
                + "        }\n"
                + "    }\n"
                + "/**\n"
                + " * @return  daje driver\n"
                + " */\n"
                + "    static public String getDriver() {\n"
                + "        return driver;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunTokenizedVersion() {\n"
                + "        return runTokenizedVersion;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunTokenizedVersion(boolean arunTokenizedVersion) {\n"
                + "        runTokenizedVersion = arunTokenizedVersion;\n"
                + "    }\n"
                + "\n"
                + "    static public Level getFileLogLevel() {\n"
                + "        return fileLogLevel;\n"
                + "    }\n"
                + "\n"
                + "    static public void setFileLogLevel(Level afileLogLevel) {\n"
                + "        fileLogLevel = afileLogLevel;\n"
                + "    }\n"
                + "\n"
                + "    static public Level getConsoleLogLevel() {\n"
                + "        return consoleLogLevel;\n"
                + "    }\n"
                + "\n"
                + "    static public void setConsoleLogLevel(Level aconsoleLogLevel) {\n"
                + "        consoleLogLevel = aconsoleLogLevel;\n"
                + "    }\n"
                + "    \n"
                + "    /**\n"
                + "     * Directory to which all files are copied and then preprocesing techiques performed\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static Path getWorkingDir() {\n"
                + "        return workingDir;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     * Directory to which all files are copied and then preprocesing techiques performed\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static void setWorkingDir(Path workingDir) {\n"
                + "        GP.workingDir = workingDir;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     * Directory where all files that need to be checked are placed\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static Path getSourceDir() {\n"
                + "        return sourceDir;\n"
                + "    }\n"
                + "\n"
                + "     /**\n"
                + "     * Directory where all files that need to be checked are placed\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static void setSourceDir(Path sourceDir) {\n"
                + "        GP.sourceDir = sourceDir;\n"
                + "    }\n"
                + "\n"
                + "     /**\n"
                + "     * How many levels does working dir have until I get to the students source files\n"
                + "     * example: course -> academic year -> assignment -> student folders to check\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static int getWorkingDirLevels() {\n"
                + "        return workingDirLevels;\n"
                + "    }\n"
                + "\n"
                + "      /**\n"
                + "     * How many levels does working dir have until I get to the students source files\n"
                + "     * example: course -> academic year -> assignment -> student folders to check\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static void setWorkingDirLevels(int workingDirLevels) {\n"
                + "        GP.workingDirLevels = workingDirLevels;\n"
                + "    }\n"
                + "    \n"
                + "     public static String[] getFolders2Delete() {\n"
                + "        return folders2Delete;\n"
                + "    }\n"
                + "\n"
                + "    public static void setFolders2Delete(String[] folders2Delete) {\n"
                + "        GP.folders2Delete = folders2Delete;\n"
                + "    }\n"
                + "}\n"
                + "";
    }

    public static String getSourceCodeExample3() {
        return "/*\n"
                + " * Copyright (C) 2015 Matija Novak <matija.novak@foi.hr>\n"
                + " *\n"
                + " * This program is free software: you can redistribute it and/or modify\n"
                + " * it under the terms of the GNU General Public License as published by\n"
                + " * the Free Software Foundation, either version 3 of the License, or\n"
                + " * (at your option) any later version.\n"
                + " *\n"
                + " * This program is distributed in the hope that it will be useful,\n"
                + " * but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
                + " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
                + " * GNU General Public License for more details.\n"
                + " *\n"
                + " * You should have received a copy of the GNU General Public License\n"
                + " * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
                + " */\n"
                + "\n"
                + "package helper;\n"
                + "\n"
                + "import helper.exceptions.MySettingsException;\n"
                + "import helper.prepareVisitors.RenameStudentFolders;\n"
                + "import helper.prepareVisitors.StudentFilesRenamer;\n"
                + "import java.nio.charset.Charset;\n"
                + "import java.nio.file.Path;\n"
                + "import java.nio.file.Paths;\n"
                + "import java.util.Properties;\n"
                + "import java.util.logging.Level;\n"
                + "\n"
                + "/**\n"
                + " * Static class that holds all global parameters read form settings file\n"
                + " * @author Matija Novak\n"
                + " */\n"
                + "public class GP {\n"
                + "    \n"
                + "    \n"
                + "\n"
                + "    public static String getStandardFilePrefix() {\n"
                + "        return standardFilePrefix;\n"
                + "    }\n"
                + "\n"
                + "    public static void setStandardFilePrefix(String standardFilePrefix) {\n"
                + "        GP.standardFilePrefix = standardFilePrefix;\n"
                + "    }\n"
                + "    \n"
                + "\n"
                + "    public static boolean isUseJPlagDetection() {\n"
                + "        return useJPlagDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static void setUseJPlagDetection(boolean useJPlagDetection) {\n"
                + "        GP.useJPlagDetection = useJPlagDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static boolean isUseScherlockDetection() {\n"
                + "        return useScherlockDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static void setUseScherlockDetection(boolean useScherlockDetection) {\n"
                + "        GP.useScherlockDetection = useScherlockDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static Charset getDefaultCharset() {\n"
                + "        return defaultCharset;\n"
                + "    }\n"
                + "\n"
                + "    public static void setDefaultCharset(Charset defaultCharset) {\n"
                + "        GP.defaultCharset = defaultCharset;\n"
                + "    }\n"
                + "    \n"
                + "     public static Path getWorkingDirDataSets() {\n"
                + "        return workingDirDataSets;\n"
                + "    }\n"
                + "\n"
                + "    public static void setWorkingDirDataSets(Path workingDirDataSets) {\n"
                + "        GP.workingDirDataSets = workingDirDataSets;\n"
                + "    }\n"
                + "\n"
                + "    public static Path getWorkingDirSettings() {\n"
                + "        return workingDirSettings;\n"
                + "    }\n"
                + "\n"
                + "    public static void setWorkingDirSettings(Path workingDirSettings) {\n"
                + "        GP.workingDirSettings = workingDirSettings;\n"
                + "    }\n"
                + "\n"
                + "    public static StudentFilesRenamer.RenameStrategy getRenameStrategy() {\n"
                + "        return renameStrategy;\n"
                + "    }\n"
                + "\n"
                + "    public static void setRenameStrategy(StudentFilesRenamer.RenameStrategy renameStrategy) {\n"
                + "        GP.renameStrategy = renameStrategy;\n"
                + "    }\n"
                + "    \n"
                + "    static public String getJava_home_dir() {\n"
                + "        return java_home_dir;\n"
                + "    }\n"
                + "\n"
                + "    static public void setJava_home_dir(String ajava_home_dir) {\n"
                + "        java_home_dir = ajava_home_dir;\n"
                + "    }\n"
                + "\n"
                + "    static public String getProf_files_dir_name() {\n"
                + "        return prof_files_dir_name;\n"
                + "    }\n"
                + "\n"
                + "    static public void setProf_files_dir_name(String aprof_files_dir_name) {\n"
                + "        prof_files_dir_name = aprof_files_dir_name;\n"
                + "    }\n"
                + "\n"
                + "    static public String getMail_smtp() {\n"
                + "        return mail_smtp;\n"
                + "    }\n"
                + "\n"
                + "    static public void setMail_smtp(String amail_smtp) {\n"
                + "        mail_smtp = amail_smtp;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_2_min_types() {\n"
                + "        return overview_report_2_min_types;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_2_min_types(int aoverview_report_2_min_types) {\n"
                + "        overview_report_2_min_types = aoverview_report_2_min_types;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_1_min_similarity() {\n"
                + "        return overview_report_1_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_1_min_similarity(int aoverview_report_1_min_similarity) {\n"
                + "        overview_report_1_min_similarity = aoverview_report_1_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_2_min_similarity() {\n"
                + "        return overview_report_2_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_2_min_similarity(int aoverview_report_2_min_similarity) {\n"
                + "        overview_report_2_min_similarity = aoverview_report_2_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_2_max_similarity() {\n"
                + "        return overview_report_2_max_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_2_max_similarity(int aoverview_report_2_max_similarity) {\n"
                + "        overview_report_2_max_similarity = aoverview_report_2_max_similarity;\n"
                + "    }\n"
                + "\n"
                + "    \n"
                + "    \n"
                + "    static public String[] getFiles2Analize() {\n"
                + "        return files2Analize;\n"
                + "    }\n"
                + "\n"
                + "    static public void setFiles2Analize(String[] files2Analize) {\n"
                + "        files2Analize = files2Analize;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isMergeAllExtensions2OneFile() {\n"
                + "        return mergeAllExtensions2OneFile;\n"
                + "    }\n"
                + "\n"
                + "    static public void setMergeAllExtensions2OneFile(boolean amergeAllExtensions2OneFile) {\n"
                + "        mergeAllExtensions2OneFile = amergeAllExtensions2OneFile;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunPlagiarsimCheck() {\n"
                + "        return runPlagiarsimCheck;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunPlagiarsimCheck(boolean arunPlagiarsimCheck) {\n"
                + "        runPlagiarsimCheck = arunPlagiarsimCheck;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunDeleteLoadMathcesIntoDb() {\n"
                + "        return runDeleteLoadMathcesIntoDb;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunDeleteLoadMathcesIntoDb(boolean arunDeleteLoadMathcesIntoDb) {\n"
                + "        runDeleteLoadMathcesIntoDb = arunDeleteLoadMathcesIntoDb;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunSendMail() {\n"
                + "        return runSendMail;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunSendMail(boolean arunSendMail) {\n"
                + "        runSendMail = arunSendMail;\n"
                + "    }\n"
                + "\n"
                + "    static public String[] getMails() {\n"
                + "        return mails;\n"
                + "    }\n"
                + "\n"
                + "    static public void setMails(String[] amails) {\n"
                + "        mails = amails;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_user() {\n"
                + "        return db_user;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_user(String adb_user) {\n"
                + "        db_user = adb_user;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_pass() {\n"
                + "        return db_pass;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_pass(String adb_pass) {\n"
                + "        db_pass = adb_pass;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_server() {\n"
                + "        return db_server;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_server(String adb_server) {\n"
                + "        db_server = adb_server;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_port() {\n"
                + "        return db_port;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_port(String adb_port) {\n"
                + "        db_port = adb_port;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_name() {\n"
                + "        return db_name;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_name(String adb_name) {\n"
                + "        db_name = adb_name;\n"
                + "    }\n"
                + "\n"
                + "    static public String getPutanja_do_plagiarsim_jar() {\n"
                + "        return plagiarism_jar_path;\n"
                + "    }\n"
                + "\n"
                + "    static public void setPutanja_do_plagiarsim_jar(String aplagiarism_jar_path) {\n"
                + "        plagiarism_jar_path = aplagiarism_jar_path;\n"
                + "    }\n"
                + "    \n"
                + "    /**\n"
                + "     *\n"
                + "     * @return daje driver za access\n"
                + "     */\n"
                + "    static public String getDriver_access() {\n"
                + "        return driver_access;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     * postavlja driver za access\n"
                + "     * @param driver_access\n"
                + "     */\n"
                + "    static public void setDriver_access(String adriver_access) {\n"
                + "        driver_access = adriver_access;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     *\n"
                + "     * @return daje driver za derby\n"
                + "     */\n"
                + "    static public String getDriver_derby() {\n"
                + "        return driver_derby;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     * postavlja driver za derby\n"
                + "     * @param driver_derby\n"
                + "     */\n"
                + "    static public void setDriver_derby(String adriver_derby) {\n"
                + "        driver_derby = adriver_derby;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     *\n"
                + "     * @return daje driver za mysql\n"
                + "     */\n"
                + "    static public String getDriver_mysql() {\n"
                + "        return driver_mysql;\n"
                + "    }\n"
                + "/**\n"
                + " * postavlja driver za mysql\n"
                + " * @param driver_mysql\n"
                + " */\n"
                + "    static public void setDriver_mysql(String adriver_mysql) {\n"
                + "        driver_mysql = adriver_mysql;\n"
                + "    }\n"
                + "/**\n"
                + " *\n"
                + " * @return dajde driver za postgree\n"
                + " */\n"
                + "    static public String getDriver_postgree() {\n"
                + "        return driver_postgree;\n"
                + "    }\n"
                + "/**\n"
                + " * postavlja driver za postgree\n"
                + " * @param driver_postgree\n"
                + " */\n"
                + "    static public void setDriver_postgree(String adriver_postgree) {\n"
                + "        driver_postgree = adriver_postgree;\n"
                + "    }\n"
                + "\n"
                + "/**\n"
                + " * postavlja drivere ovisno dali je baza mysql/psql/derby/access\n"
                + " */\n"
                + "    static public void setDriver()\n"
                + "    {\n"
                + "        String server = getDb_server();\n"
                + "        if (server.indexOf(\"mysql\") != -1) {\n"
                + "            driver = getDriver_mysql();\n"
                + "        } else if (server.indexOf(\"derby\") != -1) {\n"
                + "            driver = getDriver_derby();\n"
                + "        } else if (server.indexOf(\"postgresql\") != -1) {\n"
                + "            driver = getDriver_postgree();\n"
                + "        } else if (server.indexOf(\"access\") != -1) {\n"
                + "            driver = getDriver_access();\n"
                + "        }\n"
                + "\n"
                + "        try {\n"
                + "            Class.forName(driver);\n"
                + "        } catch (java.lang.ClassNotFoundException ex2) {\n"
                + "            System.err.print(\"ClassNotFoundException: \");\n"
                + "            System.err.println(ex2.toString());\n"
                + "        }\n"
                + "    }\n"
                + "/**\n"
                + " * @return  daje driver\n"
                + " */\n"
                + "    static public String getDriver() {\n"
                + "        return driver;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunTokenizedVersion() {\n"
                + "        return runTokenizedVersion;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunTokenizedVersion(boolean arunTokenizedVersion) {\n"
                + "        runTokenizedVersion = arunTokenizedVersion;\n"
                + "    }\n"
                + "\n"
                + "    static public Level getFileLogLevel() {\n"
                + "        return fileLogLevel;\n"
                + "    }\n"
                + "\n"
                + "    static public void setFileLogLevel(Level afileLogLevel) {\n"
                + "        fileLogLevel = afileLogLevel;\n"
                + "    }\n"
                + "\n"
                + "    static public Level getConsoleLogLevel() {\n"
                + "        return consoleLogLevel;\n"
                + "    }\n"
                + "\n"
                + "    static public void setConsoleLogLevel(Level aconsoleLogLevel) {\n"
                + "        consoleLogLevel = aconsoleLogLevel;\n"
                + "    }\n"
                + "    \n"
                + "    /**\n"
                + "     * Directory to which all files are copied and then preprocesing techiques performed\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static Path getWorkingDir() {\n"
                + "        return workingDir;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     * Directory to which all files are copied and then preprocesing techiques performed\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static void setWorkingDir(Path workingDir) {\n"
                + "        GP.workingDir = workingDir;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     * Directory where all files that need to be checked are placed\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static Path getSourceDir() {\n"
                + "        return sourceDir;\n"
                + "    }\n"
                + "\n"
                + "     /**\n"
                + "     * Directory where all files that need to be checked are placed\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static void setSourceDir(Path sourceDir) {\n"
                + "        GP.sourceDir = sourceDir;\n"
                + "    }\n"
                + "\n"
                + "     /**\n"
                + "     * How many levels does working dir have until I get to the students source files\n"
                + "     * example: course -> academic year -> assignment -> student folders to check\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static int getWorkingDirLevels() {\n"
                + "        return workingDirLevels;\n"
                + "    }\n"
                + "\n"
                + "      /**\n"
                + "     * How many levels does working dir have until I get to the students source files\n"
                + "     * example: course -> academic year -> assignment -> student folders to check\n"
                + "     * @return \n"
                + "     */\n"
                + "    public static void setWorkingDirLevels(int workingDirLevels) {\n"
                + "        GP.workingDirLevels = workingDirLevels;\n"
                + "    }\n"
                + "    \n"
                + "     public static String[] getFolders2Delete() {\n"
                + "        return folders2Delete;\n"
                + "    }\n"
                + "\n"
                + "    public static void setFolders2Delete(String[] folders2Delete) {\n"
                + "        GP.folders2Delete = folders2Delete;\n"
                + "    }\n"
                + "}\n"
                + "";
    }

    public static String getSourceCodeExample4() {
        return "/*\n"
                + " * Copyright (C) 2015 Matija Novak <matija.novak@foi.hr>\n"
                + " *\n"
                + " * This program is free software: you can redistribute it and/or modify\n"
                + " * it under the terms of the GNU General Public License as published by\n"
                + " * the Free Software Foundation, either version 3 of the License, or\n"
                + " * (at your option) any later version.\n"
                + " *\n"
                + " * This program is distributed in the hope that it will be useful,\n"
                + " * but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
                + " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
                + " * GNU General Public License for more details.\n"
                + " *\n"
                + " * You should have received a copy of the GNU General Public License\n"
                + " * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
                + " */\n"
                + "\n"
                + "package helper;\n"
                + "\n"
                + "import helper.exceptions.MySettingsException;\n"
                + "import helper.prepareVisitors.RenameStudentFolders;\n"
                + "import helper.prepareVisitors.StudentFilesRenamer;\n"
                + "import java.nio.charset.Charset;\n"
                + "import java.nio.file.Path;\n"
                + "import java.nio.file.Paths;\n"
                + "import java.util.Properties;\n"
                + "import java.util.logging.Level;\n"
                + "\n"
                + "/**\n"
                + " * Static class that holds all global parameters read form settings file\n"
                + " * @author Matija Novak\n"
                + " */\n"
                + "public class GP {\n"
                + "    \n"
                + "    static private Level fileLogLevel;\n"
                + "    static private Level consoleLogLevel;\n"
                + "    static private Path workingDir;\n"
                + "    static private Path workingDirDataSets;\n"
                + "    static private Path workingDirSettings; \n"
                + "    static private Path sourceDir;\n"
                + "    static private int workingDirLevels;\n"
                + "    static private boolean useScherlockDetection;\n"
                + "    static private boolean useJPlagDetection;\n"
                + "    static private Charset defaultCharset;\n"
                + "    static private String db_user;\n"
                + "    static private String db_pass;\n"
                + "    static private String db_server;\n"
                + "    static private String db_port;\n"
                + "    static private String db_name;\n"
                + "    static private String driver_mysql;\n"
                + "    static private String driver_postgree;\n"
                + "    static private String driver_derby;\n"
                + "    static private String driver_access;\n"
                + "    static private String driver;\n"
                + "    static private String plagiarism_jar_path;\n"
                + "    static private String mails[];\n"
                + "    static private boolean runPlagiarsimCheck;\n"
                + "    static private boolean runDeleteLoadMathcesIntoDb;\n"
                + "    static private boolean runSendMail;\n"
                + "    static private boolean mergeAllExtensions2OneFile;\n"
                + "    static private String files2Analize[];\n"
                + "    static private String folders2Delete[];\n"
                + "    static private int overview_report_1_min_similarity;\n"
                + "    static private int overview_report_2_min_similarity;\n"
                + "    static private int overview_report_2_max_similarity;\n"
                + "    static private int overview_report_2_min_types;\n"
                + "    static private String mail_smtp;\n"
                + "    static private String prof_files_dir_name;\n"
                + "    static private String java_home_dir;\n"
                + "    static private boolean runTokenizedVersion;\n"
                + "    static private StudentFilesRenamer.RenameStrategy renameStrategy;\n"
                + "    static private String standardFilePrefix;\n"
                + "\n"
                + "    private GP(){\n"
                + "        //No instance posible\n"
                + "    }\n"
                + "\n"
                + "    static public void init_settings(Properties params) throws MySettingsException\n"
                + "    {\n"
                + "        for(String prop : params.stringPropertyNames()){\n"
                + "            if(params.get(prop).equals(\"\")&&!prop.equals(\"db_pass\"))\n"
                + "            {\n"
                + "                \n"
                + "                throw new MySettingsException(\"Plese enter all settings\");\n"
                + "            }\n"
                + "            System.out.println(prop + \" => \"+params.getProperty(prop));\n"
                + "        }\n"
                + "        \n"
                + "        consoleLogLevel = Level.parse(params.getProperty(\"consoleLogLevel\"));\n"
                + "        fileLogLevel = Level.parse(params.getProperty(\"fileLogLevel\"));\n"
                + "        defaultCharset = Charset.forName(params.getProperty(\"defaultCharset\"));\n"
                + "        workingDir = Paths.get(params.getProperty(\"workingDir\"));\n"
                + "        sourceDir = Paths.get(params.getProperty(\"sourceDir\"));\n"
                + "        workingDirLevels = Integer.parseInt(params.getProperty(\"workingDirLevels\"));\n"
                + "        workingDirDataSets = Paths.get(workingDir.toString(),\"datasets\");\n"
                + "        workingDirSettings = Paths.get(workingDir.toString(),\"settings\");\n"
                + "        useScherlockDetection = params.getProperty(\"useScherlockDetection\").equalsIgnoreCase(\"true\");\n"
                + "        useJPlagDetection = params.getProperty(\"useJPlagDetection\").equalsIgnoreCase(\"true\");\n"
                + "        db_name = params.getProperty(\"db_name\");\n"
                + "        db_user = params.getProperty(\"db_user\");\n"
                + "        db_pass = params.getProperty(\"db_pass\");\n"
                + "        db_server = params.getProperty(\"db_server\");\n"
                + "        db_port = params.getProperty(\"db_port\");\n"
                + "        driver_mysql = params.getProperty(\"driver_mysql\");\n"
                + "        driver_postgree = params.getProperty(\"driver_postgree\");\n"
                + "        driver_derby = params.getProperty(\"driver_derby\");\n"
                + "        driver_access = params.getProperty(\"driver_access\");\n"
                + "        setDriver();\n"
                + "        plagiarism_jar_path = params.getProperty(\"plagiarism_jar_path\");\n"
                + "        mails = params.getProperty(\"mails\").split(\",\");\n"
                + "        runPlagiarsimCheck = params.getProperty(\"runPlagiarsimCheck\").equalsIgnoreCase(\"true\");\n"
                + "        runDeleteLoadMathcesIntoDb = params.getProperty(\"runDeleteLoadMathcesIntoDb\").equalsIgnoreCase(\"true\");\n"
                + "        runSendMail = params.getProperty(\"runSendMail\").equalsIgnoreCase(\"true\");\n"
                + "        mergeAllExtensions2OneFile = params.getProperty(\"mergeAllExtensions2OneFile\").equalsIgnoreCase(\"true\");\n"
                + "        driver_derby = params.getProperty(\"driver_derby\");\n"
                + "        files2Analize = params.getProperty(\"files2Analize\").split(\",\");\n"
                + "        folders2Delete = params.getProperty(\"folders2Delete\").split(\",\");\n"
                + "        overview_report_1_min_similarity = Integer.parseInt(params.getProperty(\"overview_report_1_min_similarity\"));\n"
                + "        overview_report_2_min_similarity = Integer.parseInt(params.getProperty(\"overview_report_2_min_similarity\"));\n"
                + "        overview_report_2_max_similarity = Integer.parseInt(params.getProperty(\"overview_report_2_max_similarity\"));\n"
                + "        overview_report_2_min_types = Integer.parseInt(params.getProperty(\"overview_report_2_min_types\"));\n"
                + "        mail_smtp = params.getProperty(\"mail_smtp\");\n"
                + "        prof_files_dir_name = params.getProperty(\"prof_files_dir_name\");\n"
                + "        java_home_dir = params.getProperty(\"java_home_dir\");\n"
                + "        runTokenizedVersion = params.getProperty(\"runTokenizedVersion\").equalsIgnoreCase(\"true\");\n"
                + "        standardFilePrefix = params.getProperty(\"standardFilePrefix\");\n"
                + "        \n"
                + "        \n"
                + "        if(params.getProperty(\"renameStrategy\").equals(\"AUTOMATIC\")){\n"
                + "            renameStrategy = StudentFilesRenamer.RenameStrategy.AUTOMATIC;\n"
                + "        }\n"
                + "        else if(params.getProperty(\"renameStrategy\").equals(\"WEBDIP\")){\n"
                + "            renameStrategy = StudentFilesRenamer.RenameStrategy.WebDiP;\n"
                + "        }\n"
                + "        else if(params.getProperty(\"renameStrategy\").equals(\"IWA\")){\n"
                + "            renameStrategy = StudentFilesRenamer.RenameStrategy.IWA;\n"
                + "        }\n"
                + "        else if(params.getProperty(\"renameStrategy\").equals(\"UZDIZ\")){\n"
                + "            renameStrategy = StudentFilesRenamer.RenameStrategy.UzDiz;\n"
                + "        }\n"
                + "        else if(params.getProperty(\"renameStrategy\").equals(\"NWTIS\")){\n"
                + "            renameStrategy = StudentFilesRenamer.RenameStrategy.NWTiS;\n"
                + "        }\n"
                + "        else {\n"
                + "            throw new MySettingsException(\"NoSuch renameStrategySuported\");\n"
                + "        }\n"
                + "\n"
                + "    }\n"
                + "\n"
                + "    public static String getStandardFilePrefix() {\n"
                + "        return standardFilePrefix;\n"
                + "    }\n"
                + "\n"
                + "    public static void setStandardFilePrefix(String standardFilePrefix) {\n"
                + "        GP.standardFilePrefix = standardFilePrefix;\n"
                + "    }\n"
                + "    \n"
                + "\n"
                + "    public static boolean isUseJPlagDetection() {\n"
                + "        return useJPlagDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static void setUseJPlagDetection(boolean useJPlagDetection) {\n"
                + "        GP.useJPlagDetection = useJPlagDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static boolean isUseScherlockDetection() {\n"
                + "        return useScherlockDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static void setUseScherlockDetection(boolean useScherlockDetection) {\n"
                + "        GP.useScherlockDetection = useScherlockDetection;\n"
                + "    }\n"
                + "\n"
                + "    public static Charset getDefaultCharset() {\n"
                + "        return defaultCharset;\n"
                + "    }\n"
                + "\n"
                + "    public static void setDefaultCharset(Charset defaultCharset) {\n"
                + "        GP.defaultCharset = defaultCharset;\n"
                + "    }\n"
                + "    \n"
                + "     public static Path getWorkingDirDataSets() {\n"
                + "        return workingDirDataSets;\n"
                + "    }\n"
                + "\n"
                + "    public static void setWorkingDirDataSets(Path workingDirDataSets) {\n"
                + "        GP.workingDirDataSets = workingDirDataSets;\n"
                + "    }\n"
                + "\n"
                + "    public static Path getWorkingDirSettings() {\n"
                + "        return workingDirSettings;\n"
                + "    }\n"
                + "\n"
                + "    public static void setWorkingDirSettings(Path workingDirSettings) {\n"
                + "        GP.workingDirSettings = workingDirSettings;\n"
                + "    }\n"
                + "\n"
                + "    public static StudentFilesRenamer.RenameStrategy getRenameStrategy() {\n"
                + "        return renameStrategy;\n"
                + "    }\n"
                + "\n"
                + "    public static void setRenameStrategy(StudentFilesRenamer.RenameStrategy renameStrategy) {\n"
                + "        GP.renameStrategy = renameStrategy;\n"
                + "    }\n"
                + "    \n"
                + "    static public String getJava_home_dir() {\n"
                + "        return java_home_dir;\n"
                + "    }\n"
                + "\n"
                + "    static public void setJava_home_dir(String ajava_home_dir) {\n"
                + "        java_home_dir = ajava_home_dir;\n"
                + "    }\n"
                + "\n"
                + "    static public String getProf_files_dir_name() {\n"
                + "        return prof_files_dir_name;\n"
                + "    }\n"
                + "\n"
                + "    static public void setProf_files_dir_name(String aprof_files_dir_name) {\n"
                + "        prof_files_dir_name = aprof_files_dir_name;\n"
                + "    }\n"
                + "\n"
                + "    static public String getMail_smtp() {\n"
                + "        return mail_smtp;\n"
                + "    }\n"
                + "\n"
                + "    static public void setMail_smtp(String amail_smtp) {\n"
                + "        mail_smtp = amail_smtp;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_2_min_types() {\n"
                + "        return overview_report_2_min_types;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_2_min_types(int aoverview_report_2_min_types) {\n"
                + "        overview_report_2_min_types = aoverview_report_2_min_types;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_1_min_similarity() {\n"
                + "        return overview_report_1_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_1_min_similarity(int aoverview_report_1_min_similarity) {\n"
                + "        overview_report_1_min_similarity = aoverview_report_1_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_2_min_similarity() {\n"
                + "        return overview_report_2_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_2_min_similarity(int aoverview_report_2_min_similarity) {\n"
                + "        overview_report_2_min_similarity = aoverview_report_2_min_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public int getOverview_report_2_max_similarity() {\n"
                + "        return overview_report_2_max_similarity;\n"
                + "    }\n"
                + "\n"
                + "    static public void setOverview_report_2_max_similarity(int aoverview_report_2_max_similarity) {\n"
                + "        overview_report_2_max_similarity = aoverview_report_2_max_similarity;\n"
                + "    }\n"
                + "\n"
                + "    \n"
                + "    \n"
                + "    static public String[] getFiles2Analize() {\n"
                + "        return files2Analize;\n"
                + "    }\n"
                + "\n"
                + "    static public void setFiles2Analize(String[] files2Analize) {\n"
                + "        files2Analize = files2Analize;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isMergeAllExtensions2OneFile() {\n"
                + "        return mergeAllExtensions2OneFile;\n"
                + "    }\n"
                + "\n"
                + "    static public void setMergeAllExtensions2OneFile(boolean amergeAllExtensions2OneFile) {\n"
                + "        mergeAllExtensions2OneFile = amergeAllExtensions2OneFile;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunPlagiarsimCheck() {\n"
                + "        return runPlagiarsimCheck;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunPlagiarsimCheck(boolean arunPlagiarsimCheck) {\n"
                + "        runPlagiarsimCheck = arunPlagiarsimCheck;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunDeleteLoadMathcesIntoDb() {\n"
                + "        return runDeleteLoadMathcesIntoDb;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunDeleteLoadMathcesIntoDb(boolean arunDeleteLoadMathcesIntoDb) {\n"
                + "        runDeleteLoadMathcesIntoDb = arunDeleteLoadMathcesIntoDb;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunSendMail() {\n"
                + "        return runSendMail;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunSendMail(boolean arunSendMail) {\n"
                + "        runSendMail = arunSendMail;\n"
                + "    }\n"
                + "\n"
                + "    static public String[] getMails() {\n"
                + "        return mails;\n"
                + "    }\n"
                + "\n"
                + "    static public void setMails(String[] amails) {\n"
                + "        mails = amails;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_user() {\n"
                + "        return db_user;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_user(String adb_user) {\n"
                + "        db_user = adb_user;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_pass() {\n"
                + "        return db_pass;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_pass(String adb_pass) {\n"
                + "        db_pass = adb_pass;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_server() {\n"
                + "        return db_server;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_server(String adb_server) {\n"
                + "        db_server = adb_server;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_port() {\n"
                + "        return db_port;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_port(String adb_port) {\n"
                + "        db_port = adb_port;\n"
                + "    }\n"
                + "\n"
                + "    static public String getDb_name() {\n"
                + "        return db_name;\n"
                + "    }\n"
                + "\n"
                + "    static public void setDb_name(String adb_name) {\n"
                + "        db_name = adb_name;\n"
                + "    }\n"
                + "\n"
                + "    static public String getPutanja_do_plagiarsim_jar() {\n"
                + "        return plagiarism_jar_path;\n"
                + "    }\n"
                + "\n"
                + "    static public void setPutanja_do_plagiarsim_jar(String aplagiarism_jar_path) {\n"
                + "        plagiarism_jar_path = aplagiarism_jar_path;\n"
                + "    }\n"
                + "    \n"
                + "    /**\n"
                + "     *\n"
                + "     * @return daje driver za access\n"
                + "     */\n"
                + "    static public String getDriver_access() {\n"
                + "        return driver_access;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     * postavlja driver za access\n"
                + "     * @param driver_access\n"
                + "     */\n"
                + "    static public void setDriver_access(String adriver_access) {\n"
                + "        driver_access = adriver_access;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     *\n"
                + "     * @return daje driver za derby\n"
                + "     */\n"
                + "    static public String getDriver_derby() {\n"
                + "        return driver_derby;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     * postavlja driver za derby\n"
                + "     * @param driver_derby\n"
                + "     */\n"
                + "    static public void setDriver_derby(String adriver_derby) {\n"
                + "        driver_derby = adriver_derby;\n"
                + "    }\n"
                + "\n"
                + "    /**\n"
                + "     *\n"
                + "     * @return daje driver za mysql\n"
                + "     */\n"
                + "    static public String getDriver_mysql() {\n"
                + "        return driver_mysql;\n"
                + "    }\n"
                + "/**\n"
                + " * postavlja driver za mysql\n"
                + " * @param driver_mysql\n"
                + " */\n"
                + "    static public void setDriver_mysql(String adriver_mysql) {\n"
                + "        driver_mysql = adriver_mysql;\n"
                + "    }\n"
                + "/**\n"
                + " *\n"
                + " * @return dajde driver za postgree\n"
                + " */\n"
                + "    static public String getDriver_postgree() {\n"
                + "        return driver_postgree;\n"
                + "    }\n"
                + "/**\n"
                + " * postavlja driver za postgree\n"
                + " * @param driver_postgree\n"
                + " */\n"
                + "    static public void setDriver_postgree(String adriver_postgree) {\n"
                + "        driver_postgree = adriver_postgree;\n"
                + "    }\n"
                + "\n"
                + "/**\n"
                + " * postavlja drivere ovisno dali je baza mysql/psql/derby/access\n"
                + " */\n"
                + "    static public void setDriver()\n"
                + "    {\n"
                + "        String server = getDb_server();\n"
                + "        if (server.indexOf(\"mysql\") != -1) {\n"
                + "            driver = getDriver_mysql();\n"
                + "        } else if (server.indexOf(\"derby\") != -1) {\n"
                + "            driver = getDriver_derby();\n"
                + "        } else if (server.indexOf(\"postgresql\") != -1) {\n"
                + "            driver = getDriver_postgree();\n"
                + "        } else if (server.indexOf(\"access\") != -1) {\n"
                + "            driver = getDriver_access();\n"
                + "        }\n"
                + "\n"
                + "        try {\n"
                + "            Class.forName(driver);\n"
                + "        } catch (java.lang.ClassNotFoundException ex2) {\n"
                + "            System.err.print(\"ClassNotFoundException: \");\n"
                + "            System.err.println(ex2.toString());\n"
                + "        }\n"
                + "    }\n"
                + "/**\n"
                + " * @return  daje driver\n"
                + " */\n"
                + "    static public String getDriver() {\n"
                + "        return driver;\n"
                + "    }\n"
                + "\n"
                + "    static public boolean isRunTokenizedVersion() {\n"
                + "        return runTokenizedVersion;\n"
                + "    }\n"
                + "\n"
                + "    static public void setRunTokenizedVersion(boolean arunTokenizedVersion) {\n"
                + "        runTokenizedVersion = arunTokenizedVersion;\n"
                + "    }\n"
                + "\n"
                + "    static public Level getFileLogLevel() {\n"
                + "        return fileLogLevel;\n"
                + "    }\n"
                + "\n"
                + "    static public void setFileLogLevel(Level afileLogLevel) {\n"
                + "        fileLogLevel = afileLogLevel;\n"
                + "    }\n"
                + "\n"
                + "    static public Level getConsoleLogLevel() {\n"
                + "        return consoleLogLevel;\n"
                + "    }\n"
                + "\n"
                + "    static public void setConsoleLogLevel(Level aconsoleLogLevel) {\n"
                + "        consoleLogLevel = aconsoleLogLevel;\n"
                + "    }\n"
                + "    \n"
                + "}\n"
                + "";
    }

}
